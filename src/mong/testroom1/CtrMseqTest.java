package mong.testroom1;import java.io.BufferedReader;import java.io.DataInputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.text.DecimalFormat;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Set;import java.util.regex.Matcher;import java.util.regex.Pattern;public class CtrMseqTest {		private static Map<String, String> mseq = null;		static{		mseq = new HashMap<String, String>();		mseq.put("386945", "A_일반상품_모든상품탭");		mseq.put("386946", "A_일반상품_TV상품탭");		mseq.put("386947", "A_일반상품_백화점");		mseq.put("386948", "A_일반상품_해외쇼핑탭");		mseq.put("386949", "A_추천상품_모든상품탭");		mseq.put("386950", "A_추천상품_TV상품탭");		mseq.put("386951", "A_추천상품_백화점탭");		mseq.put("386952", "A_추천상품_해외쇼핑탭");		mseq.put("386953", "A_도서상품");		mseq.put("386427", "B_일반상품_모든상품탭");		mseq.put("386429", "B_일반상품_TV상품탭");		mseq.put("386430", "B_일반상품_백화점");		mseq.put("386431", "B_일반상품_해외쇼핑탭");		mseq.put("386098", "B_추천상품_모든상품탭");		mseq.put("386426", "B_추천상품_TV상품탭");		mseq.put("386425", "B_추천상품_백화점탭");		mseq.put("386428", "B_추천상품_해외쇼핑탭");		mseq.put("386929", "B_도서상품");	}		/**	 * @param args	 * @throws IOException 	 */	public static void main(String[] args) throws IOException {		if(args.length == 0){			System.out.println("Args[0] is must input");			//return;		}				Thread t = new Thread(){			public void run(){				try {					while (!Thread.interrupted()) {						Thread.sleep(1000);						System.out.print(".");					}				} catch (InterruptedException e) {					// TODO: handle exception				}			}		};				t.setDaemon(true);		t.start();				//		String filePath = "/Users/acacia99/works/search/data/";		String filePath = "/wiselog/rawdata/" + args[0] + "/";		FileInputStream fis = null;		DataInputStream in = null;		BufferedReader br = null;				File[] listFile = new File(filePath).listFiles(); 				Map<String, Long> m = new HashMap<String, Long>(); 			try {			for (int i = 0; i < listFile.length; i++) {								if(listFile[i].isFile() && listFile[i].getName().indexOf(".log") > -1){									fis = new FileInputStream(filePath+listFile[i].getName());					in = new DataInputStream(fis);					br = new BufferedReader(new InputStreamReader(in));										String strLine;					//int cnt = 0;										while((strLine=br.readLine()) != null){						//if(cnt > 40)							//break;												//cnt++;												//strLine = URLDecoder.decode(strLine, "utf-8");						Pattern p1 = Pattern.compile("(GET|PUT|POST)\\s*(http|https|ftp)://[^\\s^\\.]+(.gsshop.com/jsp/dummylog.jsp\\?ab=(A|B)&lseq=[0-9]+&mseq=[0-9]+)");						Matcher m1 = p1.matcher(strLine);						if(m1.find()){							String strUrl = m1.group();							String mseqVal = "";							if(strUrl.indexOf("mseq=") > -1){																mseqVal = strUrl.substring(strUrl.indexOf("mseq=")+"mseq=".length());								if(mseqVal.indexOf("&") > -1){									mseqVal = mseqVal.substring(0, mseqVal.indexOf("&"));								}																if(m.containsKey(mseqVal) && m.get(mseqVal) != null){									long tmp = (Long)m.get(mseqVal).longValue()+1;									m.put(mseqVal, new Long(tmp));								}else{									m.put(mseqVal, new Long(1));								}																//System.out.println("mseqVal:"+mseqVal);							}						}					}										System.out.println("listFile["+i+"].getName():"+listFile[i].getName());				}			}						} catch (Exception e) {			System.out.println(e.getMessage());		} finally {			br.close();			in.close();			fis.close();		}				long aTotal = 0;		long bTotal = 0;		if(m != null && m.size() > 0){			Set<String> keySet = m.keySet();			Iterator<String> itr = keySet.iterator();			String str=null;		    while (itr.hasNext()) {		      str = itr.next();		      if(getMseqComment(str).indexOf("A_") > -1){		    	  aTotal += (Long)m.get(str).longValue();		      }else if(getMseqComment(str).indexOf("B_") > -1){		    	  bTotal += (Long)m.get(str).longValue();		      }		    }		}				StringBuffer stb = new StringBuffer();		if(m != null && m.size() > 0){			Set<String> keySet = m.keySet();			Iterator<String> itr = keySet.iterator();			String str=null;			String pattern = "##.##";			DecimalFormat dformat = new DecimalFormat(pattern);		    while (itr.hasNext()) {		      str = itr.next();		      		      stb.append(str).append("\t").append(m.get(str)).append("\t");		      if(getMseqComment(str).indexOf("A_") > -1){		    	  if(aTotal > 0){		    		  stb.append(dformat.format((Long)m.get(str).longValue()*100/(aTotal*1.0f)));		    	  }		      }else if(getMseqComment(str).indexOf("B_") > -1){		    	  if(bTotal > 0){		    		  stb.append(dformat.format((Long)m.get(str).longValue()*100/(bTotal*1.0f)));		    	  }		      }		      stb.append("\n");		    }		}else{			System.out.println("m is empty");		}				System.out.println("A_TOTAL:"+aTotal);		System.out.println("B_TOTAL:"+bTotal);		System.out.println(stb.toString());				FileWriter writer = null;		try {			writer = new FileWriter("/wiselog/rawdata/filedata/" + args[0] + "_mseq.txt");			writer.write(stb.toString());					} catch (Exception e) {			System.out.println("Error:"+e.getMessage());		} finally {			if(writer != null){				writer.close();			}			t.interrupt();		}				System.out.println("END");	}		public static String getMseqComment(String key){				if(mseq.containsKey(key) && mseq.get(key) != null)			return (String)mseq.get(key);		else			return "";	}	}