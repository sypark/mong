package mong.testroom1;import java.io.BufferedReader;import java.io.DataInputStream;import java.io.FileInputStream;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.text.Collator;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.List;public class KeywordSort {	public static void main(String[] args) throws IOException {				List<Keyword> result = new ArrayList<Keyword>();				FileInputStream fis = null;		DataInputStream in = null;		BufferedReader br = null;				String filenm = "/wiselog/rawdata/keyword/keyword_sort_uniq2.txt";		//String filenm = "/Users/acacia99/works/eds/Mong1/src/mong/testroom1/keyword_sort_uniq2.txt";				try {			fis = new FileInputStream(filenm);			in = new DataInputStream(fis);			br = new BufferedReader(new InputStreamReader(in));						String strLine;			//cnt = 0;						while((strLine=br.readLine()) != null){				if(strLine != null && !"".equals(strLine)){					String [] ss = strLine.split("\\$\\$\\$");					if(ss != null && ss.length > 1){						System.out.println("ss[0]:"+ss[0] + "ss[1]:"+ss[1]);												Keyword keyword = new Keyword();						keyword.setCnt(Integer.parseInt(ss[0]));						keyword.setKeyword(ss[1]);												result.add(keyword);					}				}			}					} catch (Exception e) {			System.out.println("Error:"+e.getMessage());		} finally {			br.close();			in.close();			fis.close();					}				// Data Sorting		Collections.sort(result ,itemComparator);				FileWriter writer = null;		try {			writer = new FileWriter("/wiselog/rawdata/keyword/keyword_final2.txt");			for (Keyword keyword : result) {				writer.write(keyword.getCnt() + "\t" + keyword.getKeyword() + "\n");			}		} catch (Exception e) {			// TODO: handle exception		} finally {			if(writer != null){				writer.close();			}		}	}		private final static Comparator<Keyword> itemComparator= new Comparator<Keyword>() {    	private final Collator collator = Collator.getInstance();    	public int compare(Keyword item1, Keyword item2) {    		return collator.compare(new Integer(new Integer(item2.getCnt()).intValue()+10000).toString(), new Integer(new Integer(item1.getCnt()).intValue()+10000).toString());    	}    };    }class Keyword{	private int cnt;	private String keyword;		public void setCnt(int cnt){		this.cnt = cnt;	}		public int getCnt(){		return this.cnt;	}		public void setKeyword(String keyword){		this.keyword = keyword;	}		public String getKeyword(){		return this.keyword;	}}